from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.metrics import mean_squared_error, classification_report
import pandas as pd
import time


def main():
    dataset = pd.read_csv("ClaMP_Raw-5184.csv")
    dataset = dataset[dataset < 2**31].fillna(0)

    # To apply an classifier on this data, we need to flatten the image, to
    # turn the data in a (samples, feature) matrix:
    features = dataset.columns[:-1]
    X = dataset.loc[:, features]
    y = dataset["class"]

    # Split the dataset in two equal parts
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

    # Set the parameters by cross-validation
    parameters = {"splitter": ["best", "random"],
                  "max_depth": [1, 3, 5, 7],
                  "min_samples_leaf": [1, 2, 3, 4, 5],
                  "min_weight_fraction_leaf": [0.1, 0.2, 0.3, 0.4, 0.5],
                  "max_features": ["auto", "log2"],
                  "max_leaf_nodes": [None, 10, 20, 30, 40, 50]}

    decision_model = DecisionTreeClassifier()
    decision_model.fit(X, y)
    predict = decision_model.predict(X_test)
    predict = [round(item) for item in predict]
    print(classification_report(y_test, predict))
    print(f'decision tree classification result is: {mean_squared_error(y_test, predict)}')

    best = {'max_depth': 5, 'max_features': 'log2', 'max_leaf_nodes': 50, 'min_samples_leaf': 2, 'min_weight_fraction_leaf': 0.1, 'splitter': 'best'}


if __name__ == '__main__':
    start = time.time()

    main()

    end = time.time()
    print(f'time passed is: {end - start}')
