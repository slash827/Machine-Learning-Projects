from sklearn.model_selection import train_test_split
import sklearn.ensemble as ske
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from xgboost import XGBClassifier
from sklearn.metrics import mean_squared_error, classification_report
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import time


def classifing(X, y):
    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    # todo the commented ones were not the greatest
    classifiers = {
        "Random Forest": ske.RandomForestClassifier(n_estimators=50),
        # "GradientBoosting": ske.GradientBoostingClassifier(n_estimators=50),
        # "AdaBoost": ske.AdaBoostClassifier(n_estimators=100),
        # "Decision Tree": DecisionTreeClassifier(random_state=1),
        "SVM": SVC(random_state=0),
        "Logistic Regression": LogisticRegression(random_state=1, max_iter=500),
        "Naive Bayes": GaussianNB(),
        # "XGBoost": XGBClassifier(),
        # "KNN": KNeighborsClassifier(),
    }

    for classifier in classifiers.keys():
        clf = classifiers[classifier]
        clf.fit(x_train, y_train)
        predict = clf.predict(x_test)
        print(classification_report(y_test, predict))
        print(f'{classifier} classification result is: {mean_squared_error(y_test, predict)}')


def malware_detect_uci():
    dataset = pd.read_csv("uci_malware_detection.csv")
    features = dataset.columns[1:]

    x = dataset.loc[:, features]
    y = dataset.Label
    le = LabelEncoder()
    y = le.fit_transform(y)

    classifing(x, y)


if __name__ == '__main__':
    start = time.time()
    malware_detect_uci()
    end = time.time()

    print(f'total time is: {end - start}')
